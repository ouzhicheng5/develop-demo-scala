<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="cn.demo"></context:component-scan>

    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />

    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer" class="cn.demo.common.util.PropertyPlaceholder">
        <property name="locations">
            <list>
                <!-- 这里支持多种寻址方式：classpath和file -->
                <value>classpath*:/conf/conf.properties</value>
            </list>
        </property>
    </bean>
    <!--定时任务配置引入-->
    <!--<import resource="ndt-task.xml"/>-->

    <!-- This is needed if you want to use the @Transactional annotation -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <property name="driverClassName" value="${jdbc.driverClassName}"/>
                <property name="jdbcUrl" value="${jdbc.url}&amp;useUnicode=true&amp;characterEncoding=UTF-8"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                <property name="connectionTestQuery" value="${jdbc.connectionTestQuery}"/>
                <property name="connectionTimeout" value="${jdbc.connectionTimeout}"/>
                <property name="idleTimeout" value="${jdbc.idleTimeout}"/>
                <property name="maxLifetime" value="${jdbc.maxLifetime}"/>
                <property name="maximumPoolSize" value="${jdbc.maximumPoolSize}"/>
                <property name="minimumIdle" value="${jdbc.minimumIdle}"/>
                <property name="autoCommit" value="true"/>
                <!--默认事务隔离级别-->
            </bean>
        </constructor-arg>
    </bean>

    <!-- Configure Spring's transaction manager to use a DataSource -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="transactionAwareDataSource"
          class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSource" />
    </bean>

    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource" />
    </bean>
    <!--jooq相关listener-->
    <bean id="exceptionTranslator"
          class="cn.demo.common.common.transaction.SpringExceptionTranslationExecuteListener"/>

    <bean class="org.jooq.impl.DefaultConfiguration" name="config" id="config">
        <property name="SQLDialect"><value type="org.jooq.SQLDialect">POSTGRES</value></property>
        <property name="connectionProvider" ref="connectionProvider" />
        <property name="executeListenerProvider">
            <array>
                <bean class="org.jooq.impl.DefaultExecuteListenerProvider">
                    <constructor-arg index="0" ref="exceptionTranslator"/>
                </bean>
            </array>
        </property>
    </bean>

    <bean id="dsl" class="org.jooq.impl.DefaultDSLContext">
        <constructor-arg ref="config" />
    </bean>

    <bean id="springTransactionProvider" class="cn.demo.common.common.transaction.SpringTransactionProvider"/>

    <bean id="springExceptionTranslationExecuteListener"
          class="cn.demo.common.common.transaction.SpringExceptionTranslationExecuteListener"/>

    <bean id="springTransactionConnectionProvider"
          class="cn.demo.common.common.transaction.SpringTransactionConnectionProvider">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="jooqTransactionFactory" class="cn.demo.common.common.transaction.JooqTransactionFactory"
          scope="prototype">
        <constructor-arg ref="springTransactionConnectionProvider"/>
        <constructor-arg ref="springTransactionProvider"/>
        <constructor-arg ref="springExceptionTranslationExecuteListener"/>
    </bean>

<!--    <bean class="org.flywaydb.core.Flyway" init-method="migrate" lazy-init="false">
        <property name="locations" value="flywaySQL"></property>
        <property name="schemas" value="${jdbc.schema}"></property>
        <property name="dataSource" ref="dataSource"></property>
        <property name="baselineOnMigrate" value="true"></property>
        <property name="baselineVersionAsString" value="0.0"></property>
    </bean>-->

    <!--activit start-->
    <!--<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSource" />
        <property name="databaseType" value="postgres" />
        <property name="databaseSchema" value="ndt" />
        <property name="tablePrefixIsSchema" value="true" />
        <property name="transactionManager" ref="transactionManager" />
        <property name="databaseSchemaUpdate" value="true" />
        <property name="deploymentResources" value="classpath*:/diagrams.zip"  />
        <property name="deploymentMode" value="single-resource" />
    </bean>

    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration" />
    </bean>

    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"  lazy-init="false"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />-->
    <!--activit end-->

</beans>